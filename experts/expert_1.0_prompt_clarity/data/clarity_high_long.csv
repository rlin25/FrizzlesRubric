text,label
"Implement a real-time collaborative text editing feature within the 'document editor' view, utilizing the operational transformation (OT) algorithm specifically implemented by the 'ot.js' library (version 1.7.0) to ensure consistent document state across multiple concurrent users, establishing a persistent WebSocket connection (endpoint 'wss://collab.example.com/documents/{documentId}') to a dedicated collaboration server, and providing clear visual indicators of other users' cursors and selections with distinct color-coded identifiers for each active collaborator, ensuring a maximum latency of 500 milliseconds for reflecting remote changes on all connected clients.",1
"Create a comprehensive and highly configurable data table component, specifically for displaying tabular data within the 'admin panel' section, utilizing the 'react-table' library (version 7.8.0) with support for features including multi-column sorting (with visual indicators for sort order and direction), column resizing (with persistent storage of column widths in local storage under the key 'adminTableColumnWidths'), global and column-specific filtering (with customizable filter types such as text match, range selection, and multi-select dropdowns), pagination (with user-configurable page size options stored in local storage under 'adminTablePageSize'), and optional row selection with a dedicated checkbox column and bulk action capabilities (e.g., delete selected rows).",1
"Design a robust and user-friendly file upload component, specifically within the 'profile settings' page for uploading user avatar images, utilizing the 'react-dropzone' library (version 11.5.0) to allow drag-and-drop and file selection via a standard file dialog, implementing client-side file size validation (maximum 2MB), accepted file type validation (JPEG, PNG, GIF), and displaying a clear visual preview of the selected image before upload, with the actual file upload performed asynchronously to a dedicated backend API endpoint ('/api/users/avatar') using the 'axios' library (version 0.27.2) with progress tracking displayed to the user via a linear progress bar.",1
"Implement a highly interactive and customizable charting library, specifically within the 'analytics dashboard' to visualize key business metrics, utilizing the 'Chart.js' library (version 3.7.1) with support for various chart types (line, bar, pie, scatter), allowing users to dynamically switch between chart types via a dropdown menu, providing options for customizing chart axes, labels, tooltips, and legends, and ensuring that all charts are fully responsive and adapt seamlessly to different screen sizes, with the underlying chart data fetched from a dedicated backend API endpoint ('/api/analytics/data') and updated at least every 5 minutes.",1
"Create a comprehensive and accessible form component for user registration (located at the '/register' route), including input fields for username (minimum 6 alphanumeric characters), email address (validated against a regular expression conforming to RFC 5322), password (minimum 12 characters with complexity requirements enforced client-side using 'zxcvbn' version 4.4.2), and password confirmation (must match the password field), with clear and immediate inline validation feedback displayed for each field as the user types, and a prominent 'Submit' button that is only enabled when all form fields are valid, submitting the form data via a POST request to the '/api/register' endpoint using the 'fetch' API with appropriate error handling and success message display.",1
"Design a search functionality, specifically within the main application header, utilizing the 'react-autosuggest' library (version 10.1.0) to provide real-time suggestions as the user types, fetching search results from a dedicated backend API endpoint ('/api/search?query={query}') with a maximum debounce time of 300 milliseconds to prevent excessive API calls, displaying search results categorized by type (e.g., products, users, articles) with clear visual distinctions, and allowing users to navigate through the suggestions using keyboard arrow keys and select a result to be redirected to the corresponding detail page.",1
"Implement a robust and accessible modal component, utilized throughout the application for various purposes such as confirmation prompts and displaying detailed information, ensuring that the modal is properly announced to screen readers using ARIA attributes ('role='dialog'', 'aria-modal='true'', 'aria-labelledby' and 'aria-describedby' referencing appropriate elements), traps keyboard focus within the modal content until it is explicitly closed (using a focus trap library like 'focus-trap-react' version 9.0.1), and can be closed by clicking a dedicated 'Close' button (with an 'aria-label='Close modal'') or by pressing the 'Escape' key.",1
"Create a highly interactive and customizable map component, specifically for displaying location-based data on the 'locations' page, utilizing the 'react-leaflet' library (version 4.0.1) with integration with the 'OpenStreetMap' tile layer, allowing users to zoom and pan the map, display markers at specific coordinates fetched from the '/api/locations' endpoint, and optionally display interactive popups with additional information when a marker is clicked, ensuring that the map component is fully responsive and adapts to different screen sizes without any layout issues.",1
"Design a comprehensive and user-friendly notification system, displayed as a dropdown menu accessible from the application header (via a bell icon), fetching new notifications from the '/api/notifications' endpoint at least every 60 seconds using a polling mechanism, displaying each notification with a timestamp, a clear message, and an optional link to the relevant content, allowing users to mark notifications as read (via a dedicated 'Mark as Read' button for each notification and a 'Mark All as Read' option), and visually indicating the number of unread notifications with a badge on the bell icon.",1
"Implement a highly configurable and visually appealing image carousel component, specifically for showcasing product images on the 'product details' page, utilizing the 'react-slick' library (version 0.29.0) with support for features including automatic sliding with a configurable interval (e.g., 5 seconds), manual navigation using 'Next' and 'Previous' buttons and dot indicators, infinite looping, and responsive settings to adjust the number of visible slides and other options based on screen size, ensuring smooth transitions between slides and optimal image loading performance.",1
"Create a comprehensive and accessible pagination component, utilized for displaying large lists of data such as search results and product listings, providing clear controls for navigating between pages (e.g., 'Previous', 'Next', and numbered page links), displaying the current page number and the total number of pages, allowing users to select the number of items displayed per page via a dropdown menu (with options like 10, 25, 50, and 100), and ensuring that the pagination controls are clearly announced to screen readers using appropriate ARIA attributes.",1
"Design a robust and user-friendly video player component, specifically for embedding instructional videos on the 'tutorials' page, utilizing the 'react-player' library (version 2.10.1) with support for playing videos from various sources (e.g., YouTube, Vimeo, local files), providing standard playback controls (play, pause, volume, fullscreen), displaying video progress and duration, and allowing users to adjust playback speed and toggle subtitles if available, ensuring that the video player is fully responsive and adapts to different container sizes.",1
"Implement a highly interactive and customizable rating component, specifically for allowing users to rate products on the 'product details' page, utilizing a star rating system implemented with SVG icons, allowing users to click on a star to select a rating from 1 to 5, displaying the current average rating and the total number of ratings received for each product, and ensuring that only authenticated users can submit ratings, with the submitted ratings sent asynchronously to the '/api/products/[productId]/rate' endpoint.",1
"Create a comprehensive and accessible color picker component, specifically for allowing users to customize the application's theme colors in the 'settings' page, utilizing the 'react-color' library (version 2.19.3) providing a visually intuitive interface for selecting colors from a palette or by entering hex codes, displaying the currently selected color, and allowing users to save their color preferences to their user profile via an API call to '/api/users/theme'.",1
"Design a autocomplete search input field, specifically within the main application header, utilizing the 'react-select' library (version 5.7.0) in its 'async' mode to fetch suggestions from the '/api/autocomplete?query={query}' endpoint as the user types, displaying a dropdown list of matching results categorized by type (e.g., products, categories, brands), allowing users to select a suggestion with their mouse or keyboard, and navigating the user to the detail page for the selected item upon selection.",1
"Implement a robust and accessible image gallery component, specifically for showcasing multiple product images on the 'product details' page, utilizing a thumbnail navigation system alongside a larger main image display, allowing users to cycle through the images using 'Next' and 'Previous' buttons or by clicking on thumbnails, ensuring that the currently displayed image is clearly indicated, and providing an option to view a fullscreen image viewer with zoom and pan capabilities.",1
"Create a comprehensive and user-friendly date and time picker component, specifically for selecting event dates and times within the 'calendar' feature, utilizing the 'react-datepicker' library (version 4.8.0) with support for features including single and range selection, customizable date formats, time selection with configurable intervals, and localization for different languages, ensuring that the component is accessible via keyboard navigation and properly announces its state to screen readers.",1
"Design a highly interactive and customizable progress bar component, utilized throughout the application to indicate the status of long-running operations such as file uploads and data processing, providing visual feedback on the percentage complete, optionally displaying a textual representation of the progress (e.g., '75% complete'), and allowing for different styles (e.g., linear, circular) and color customizations based on the operation's status (e.g., green for success, yellow for warning, red for error).",1
"Create a comprehensive and accessible tooltip component, utilized throughout the application to provide contextual help and additional information on hover or focus of specific elements, ensuring that the tooltip is positioned correctly relative to the target element to avoid overlapping other content, remains visible for a reasonable duration (e.g., 3 seconds), is clearly announced to screen readers using the 'aria-describedby' attribute, and can be styled consistently across the application.",1
"Design a Markdown editor component, specifically within the 'content management system' for creating and editing articles, utilizing the 'react-markdown' library (version 8.0.3) for rendering Markdown and a suitable editor component (e.g., 'react-simplemde-editor' version 5.2.0) with syntax highlighting, basic formatting toolbar (bold, italic, headings, lists, links), and a real-time preview of the rendered Markdown.",1
"Create a comprehensive and accessible slider component, utilized for selecting numerical values within a defined range (e.g., for filtering products by price), providing clear visual indicators of the current value and the selected range (if applicable), allowing users to adjust the value using their mouse or keyboard arrow keys, and ensuring that the component is properly announced to screen readers using ARIA attributes ('role='slider'', 'aria-valuemin', 'aria-valuemax', 'aria-valuenow', 'aria-valuetext').",1
"Design a code editor component, specifically within the 'developer tools' section of the application, utilizing the 'react-ace' library (version 1.11.3) with support for syntax highlighting for various programming languages, line numbering, code folding, and basic editing features (cut, copy, paste), allowing users to adjust font size and theme, and providing error highlighting for syntactically incorrect code.",1
"Create a comprehensive and accessible tree view component, utilized for displaying hierarchical data structures such as organizational charts or file system navigators, allowing users to expand and collapse nodes to reveal nested content, visually indicating the current level of nesting, and ensuring that the component is navigable via keyboard and properly announces its structure and state to screen readers using appropriate ARIA roles and attributes.",1
"Integrate a breadcrumb navigation component, displayed consistently below the main application header, clearly indicating the user's current location within the application's hierarchy, providing clickable links to navigate back to parent pages, and ensuring that the breadcrumb trail is automatically updated as the user navigates through different sections of the application, with the final item in the trail clearly indicating the current page.",1
"Develop a comprehensive and accessible tabbed navigation component, utilized for organizing related content within a single view, allowing users to switch between different sections by clicking on tab labels, visually indicating the currently active tab, ensuring smooth transitions between tab content, and ensuring that the tabbed navigation is navigable via keyboard and properly announces its structure and the active tab to screen readers using appropriate ARIA roles and attributes.",1
"Integrate a accordion component, utilized for progressively revealing content within a confined space, displaying a list of collapsible sections with clear headers, allowing users to expand and collapse sections by clicking on the headers, visually indicating the expanded state of each section, and ensuring that the accordion is navigable via keyboard and properly announces its structure and the expanded/collapsed state of each section to screen readers using appropriate ARIA roles and attributes.",1
"Develop a comprehensive and accessible table of contents component, automatically generated from the headings within a longscrollable content area (e.g., a documentation page), displaying a hierarchical list of links to each heading, visually indicating the user's current position within the content by highlighting the corresponding section in the table of contents, and ensuring smooth scrolling to the selected section when a link is clicked.",1
"Integrate a rating stars component, utilized for displaying aggregated ratings (e.g., average product rating) or allowing users to provide ratings, displaying a visual representation of the rating using star icons (filled stars for the integer part and a partially filled star for the fractional part), and optionally displaying the total number of ratings received.",1
"Develop a comprehensive and accessible tag input component, allowing users to enter and manage a list of tags (e.g., for categorizing products or articles), displaying each entered tag as a visually distinct pill-shaped element with a small 'remove' button, allowing users to add new tags by typing text and pressing Enter or a comma, and ensuring that the component is navigable via keyboard and properly announces the entered tags to screen readers.",1
"Integrate a color swatch component, utilized for displaying available product colors or allowing users to select a color, displaying a set of small, visually distinct color swatches, allowing users to select a color by clicking on its swatch, visually indicating the currently selected color, and ensuring that the component is accessible via keyboard and properly announces the selected color to screen readers.",1
"Develop a comprehensive and accessible file tree component, utilized for displaying hierarchical file structures (e.g., within a file manager), allowing users to expand and collapse directories to navigate the file system, visually indicating the current level of nesting and file types (using distinct icons), and ensuring that the component is navigable via keyboard and properly announces its structure and the selected file or directory to screen readers.",1
"Integrate a transfer list component, allowing users to move items between two lists (e.g., selecting roles for a user), displaying two side-by-side lists with controls for moving selected items from one list to the other (single select and select all options), visually indicating the selected items, and ensuring that the component is accessible via keyboard and properly announces the moved items to screen readers.",1
"Develop a comprehensive and accessible timeline component, utilized for displaying a sequence of events over time, visually representing each event with a marker and descriptive text, connecting the events with a line to indicate the temporal flow, and ensuring that the component is navigable via keyboard and properly announces the events and their order to screen readers.",1
"Integrate a avatar upload component, specifically within the user profile settings, allowing users to upload a profile picture, displaying a circular preview of the selected image, providing controls for cropping and resizing the image before upload, and asynchronously uploading the processed image to the '/api/users/avatar' endpoint.",1
"Develop a comprehensive and accessible rating scale component (e.g., Likert scale), utilized for collecting user feedback on a range of options, displaying a horizontal row of radio buttons or checkboxes with clear labels for each option, visually indicating the selected option, and ensuring that the component is navigable via keyboard and properly announces the selected option to screen readers.",1
"Integrate a tag cloud component, utilized for displaying a set of tags with the font size of each tag proportional to its frequency or importance, allowing users to click on a tag to filter content associated with that tag, and ensuring that the component is accessible via keyboard and properly announces each tag to screen readers.",1
"Develop a comprehensive and accessible data grid component with advanced features, specifically for displaying and manipulating large datasets in the admin panel, utilizing a virtualized rendering technique to ensure performance with thousands of rows, supporting column sorting, filtering, resizing, and reordering via drag and drop, and providing optional row grouping and aggregation capabilities.",1
"Integrate a WYSIWYG (What You See Is What You Get) editor component, specifically within the content management system for creating rich text content, providing a toolbar with common formatting options (bold, italic, headings, lists, links, images), and ensuring that the generated HTML is clean and semantically correct.",1
"Develop a comprehensive and accessible color gradient picker component, allowing users to select a start and end color and define intermediate color stops to create custom gradients, displaying a visual preview of the generated gradient, and providing options for adjusting the gradient direction and type (linear, radial).",1
"Integrate a icon picker component, allowing users to browse and select from a library of icons (e.g., Font Awesome), displaying the icons in a grid view with search and filtering capabilities, and providing a clear visual indication of the selected icon.",1
"Develop a comprehensive and accessible kanban board component, utilized for managing tasks and workflows, displaying tasks organized into columns representing different stages, allowing users to drag and drop tasks between columns, and providing options for creating, editing, and deleting tasks.",1
"Integrate a QR code generator component, allowing users to input text or a URL and generate a corresponding QR code, displaying the generated QR code as an image, and providing options for downloading the QR code as a PNG or SVG file.",1
"Develop a comprehensive and accessible organizational chart component, visualizing hierarchical relationships within an organization, displaying employee names and titles in a tree-like structure, and allowing users to expand and collapse branches.",1